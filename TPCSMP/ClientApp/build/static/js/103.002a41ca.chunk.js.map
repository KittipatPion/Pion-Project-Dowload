{"version":3,"sources":["components/master/location/Zone.js"],"names":["fields","key","label","Constant","arrFieldMasterZone","_style","width","sorter","filter","Zone","useState","error","setError","isLoaded","setIsLoaded","errorAPI","setErrorAPI","isLoadingData","setIsLoadingData","isPostingData","setIsPostingData","baseItems","setBaseItems","items","setItems","details","setDetails","isShowAddForm","setIsShowAddForm","isConfirmSave","setIsConfirmSave","isConfirmEdit","setIsConfirmEdit","isConfirmDelete","setIsConfirmDelete","fieldDelete","setFieldDelete","handleChangeUpdateField","type","e","newObj","zoneName","target","value","isActive","onClickAddData","document","getElementById","fnInsertData","onClickEditData","zoneId","fnUpdateData","onClickDeleteData","fnDeleteData","arrData","Repository","fetchAddZoneList","then","result","httpCode","window","location","reload","fetchEditZoneList","index","fetchRemoveZoneList","fnGetDataForEdit","fetchGetZoneListById","data","useEffect","fetchGetZoneList","getIsValidForm","formClassName","forms","querySelectorAll","isValid","Array","prototype","slice","call","forEach","form","checkValidity","classList","add","onClickCheckFormAddData","onClickCheckFormEditData","showLoadingData","className","apiLoadingData","variant","size","collapseEditForm","show","includes","dataEditForm","Object","keys","length","noValidate","md","component","Grid","item","boxShadow","xs","style","height","styleHeightField","onChange","maxLength","required","inValidNullMessage","class","onClick","txtFormisActive","color","checked","labelOn","labelOff","sm","btAddSize","block","btEditData","btDeleteData","apiTopicFetchError","message","lg","txtMasterZone","btHeaderSize","btAddData","id","btSave","columnFilter","tableFilter","tabletxtSearch","placeholder","tabletxtPlaceholder","itemsPerPageSelect","tabletxtCountPage","itemsPerPage","hover","pagination","scopedSlots","name","shape","keyId","position","indexOf","newDetails","splice","toggleDetails","btCollapseHide","btCollapseShow","centered","closeOnBackdrop","messageDescription","btOK","onClose","closeButton","titleConfirmChangeData","contentConfirmAddData","btCancel","contentConfirmEditData","contentConfirmDeleteData"],"mappings":"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","file":"static/js/103.002a41ca.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CDataTable,\r\n    CCollapse,\r\n    CInput,\r\n    CLabel,\r\n    CForm,\r\n    CFormGroup,\r\n    CModal,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalHeader,\r\n    CModalTitle,\r\n    CRow,\r\n    CInvalidFeedback,\r\n    CBadge,\r\n    CInputCheckbox,\r\n    CSwitch,\r\n    CSpinner\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport Repository from '../../../repositories/Repository'\r\nimport Constant from '../../../helpers/Constant';\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport functionController from '../../../helpers/FunctionController';\r\n\r\nconst fields = [\r\n    {\r\n        key: 'zoneName',\r\n        label: `${Constant.arrFieldMasterZone[0]}`,\r\n    },\r\n    {\r\n        key: 'isActive',\r\n        label: `${Constant.arrFieldMasterZone[1]}`,\r\n        _style: { width: '1%' },\r\n    },\r\n    {\r\n        key: 'manage',\r\n        label: '',\r\n        _style: { width: '1%' },\r\n        sorter: false,\r\n        filter: false\r\n    },\r\n]\r\n\r\nexport default function Zone() {\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [errorAPI, setErrorAPI] = useState(false);\r\n    const [isLoadingData, setIsLoadingData] = useState(false);\r\n    const [isPostingData, setIsPostingData] = useState(false);\r\n    const [baseItems, setBaseItems] = useState([]);\r\n    const [items, setItems] = useState({});\r\n    const [details, setDetails] = useState([]);\r\n    const [isShowAddForm, setIsShowAddForm] = useState(false);\r\n    const [isConfirmSave, setIsConfirmSave] = useState(false);\r\n    const [isConfirmEdit, setIsConfirmEdit] = useState(false);\r\n    const [isConfirmDelete, setIsConfirmDelete] = useState(false);\r\n    const [fieldDelete, setFieldDelete] = useState(null);\r\n\r\n    const pageCode = \"\";\r\n\r\n    const toggleDetails = (index, keyId) => {\r\n        const position = details.indexOf(index);\r\n        let newDetails = details.slice();\r\n        if (position !== -1) {\r\n            // Close Collapse\r\n            newDetails.splice(position, 1)\r\n        } else {\r\n            // Open Collapse\r\n            newDetails = [details, index]\r\n            if (!isLoadingData) {\r\n                fnGetDataForEdit(keyId);\r\n            }\r\n        }\r\n        setDetails(newDetails);\r\n    }\r\n\r\n    const handleChangeAddForm = () => {\r\n        setIsShowAddForm(!isShowAddForm);\r\n    }\r\n\r\n    const handleChangeConfirmDelete = (index) => (e) => {\r\n        setIsConfirmDelete(!isConfirmDelete);\r\n        setFieldDelete(index);\r\n    }\r\n\r\n    const handleChangeUpdateField = (type) => (e) => {\r\n        let newObj = { ...items };\r\n        if (type === \"zoneName\")\r\n            newObj.zoneName = e.target.value;\r\n        else if (type === \"isActive\") {\r\n            newObj.isActive = !newObj.isActive;\r\n        }\r\n        setItems(newObj);\r\n    }\r\n\r\n    const onClickAddData = () => {\r\n        setIsConfirmSave(!isConfirmSave);\r\n        var zoneName = document.getElementById(\"add-zone-name\").value;\r\n        var isActive = true;\r\n        var createBy = 1;\r\n        var newArr = [zoneName, isActive, createBy];\r\n        // console.log(newArr);\r\n        fnInsertData(newArr)\r\n    }\r\n\r\n    const onClickEditData = () => {\r\n        setIsConfirmEdit(!isConfirmEdit);\r\n        var newObj = { ...items };\r\n        var zoneId = newObj.zoneId;\r\n        var zoneName = newObj.zoneName;\r\n        var isActive = newObj.isActive;\r\n        var updateBy = 1;\r\n        var newArr = [zoneId, zoneName, isActive, updateBy];\r\n        // console.log(newArr);\r\n        fnUpdateData(newArr);\r\n    }\r\n\r\n    const onClickDeleteData = () => {\r\n        setIsConfirmDelete(!isConfirmDelete);\r\n        var zoneId = fieldDelete;\r\n        // console.log(zoneId);\r\n        fnDeleteData(zoneId);\r\n    }\r\n\r\n    const fnInsertData = (arrData) => {\r\n        setIsPostingData(true);\r\n        Repository.fetchAddZoneList(arrData)\r\n            .then(\r\n                (result) => {\r\n                    setIsPostingData(false);\r\n                    if (result.httpCode === \"200\")\r\n                        window.location.reload(false);\r\n                    else\r\n                        setErrorAPI(result);\r\n                },\r\n                (error) => {\r\n                    setIsPostingData(false);\r\n                    setErrorAPI(error);\r\n                }\r\n            )\r\n    }\r\n\r\n    const fnUpdateData = (arrData) => {\r\n        setIsPostingData(true);\r\n        Repository.fetchEditZoneList(arrData)\r\n            .then(\r\n                (result) => {\r\n                    setIsPostingData(false);\r\n                    if (result.httpCode === \"200\")\r\n                        window.location.reload(false);\r\n                    else\r\n                        setErrorAPI(result);\r\n                },\r\n                (error) => {\r\n                    setIsPostingData(false);\r\n                    setErrorAPI(error);\r\n                }\r\n            )\r\n    }\r\n\r\n    const fnDeleteData = (index) => {\r\n        setIsPostingData(true);\r\n        Repository.fetchRemoveZoneList(index)\r\n            .then(\r\n                (result) => {\r\n                    setIsPostingData(false);\r\n                    if (result.httpCode === \"200\")\r\n                        window.location.reload(false);\r\n                    else\r\n                        setErrorAPI(result);\r\n                },\r\n                (error) => {\r\n                    setIsPostingData(false);\r\n                    setErrorAPI(error);\r\n                }\r\n            )\r\n    }\r\n\r\n    const fnGetDataForEdit = (index) => {\r\n        setIsLoadingData(true);\r\n        setItems({});\r\n        Repository.fetchGetZoneListById(index)\r\n            .then(\r\n                (result) => {\r\n                    setIsLoadingData(false);\r\n                    if (result.httpCode === \"200\") {\r\n                        setItems(result.data);\r\n                    }\r\n                    else {\r\n                        setErrorAPI(result);\r\n                    }\r\n                },\r\n                (error) => {\r\n                    setIsLoadingData(false);\r\n                    setErrorAPI(error);\r\n                }\r\n            )\r\n    }\r\n\r\n    const fnCheckUserAuth = () => {\r\n        var result = functionController.getUserAuthenOneRole(pageCode);\r\n        if (result.isAuth) {\r\n            // initeState();\r\n        }\r\n        else {\r\n            setIsLoaded(true);\r\n            setError(Constant.apiMessageUnAuthenToUsePage);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        Repository.fetchGetZoneList()\r\n            .then(\r\n                (result) => {\r\n                    setIsLoaded(true);\r\n                    if (result.httpCode === \"200\") {\r\n                        setBaseItems(result.data);\r\n                    }\r\n                    else {\r\n                        setError(result);\r\n                    }\r\n                },\r\n                (error) => {\r\n                    setIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n            );\r\n    }, []);\r\n\r\n    const getIsValidForm = (formClassName) => {\r\n        var forms = document.querySelectorAll(`.${formClassName}`);\r\n        var isValid = false;\r\n        Array.prototype.slice.call(forms)\r\n            .forEach(function (form) {\r\n                if (form.checkValidity()) {\r\n                    isValid = true;\r\n                }\r\n                form.classList.add('was-validated');\r\n            });\r\n        return (isValid);\r\n    }\r\n\r\n    const onClickCheckFormAddData = () => {\r\n        if (getIsValidForm(\"add-needs-validation\")) {\r\n            setIsConfirmSave(!isConfirmSave);\r\n        }\r\n    }\r\n\r\n    const onClickCheckFormEditData = () => {\r\n        if (getIsValidForm(\"edit-needs-validation\")) {\r\n            setIsConfirmEdit(!isConfirmEdit);\r\n        }\r\n    }\r\n\r\n    const showLoadingData = () => (\r\n        <CCol className=\"text-center headtext\">\r\n            <CLabel>\r\n                {Constant.apiLoadingData}\r\n            </CLabel>\r\n            {\" \"}\r\n            <CSpinner variant=\"grow\" size=\"md\" />\r\n        </CCol>\r\n    )\r\n\r\n    const collapseAddForm = () => (\r\n        <CCollapse show={isShowAddForm}>\r\n            <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                width: ' 100%'\r\n            }}>\r\n                <CCard className='p-3'>\r\n                    <CForm className=\"add-needs-validation\" noValidate>\r\n                        <CRow>\r\n                            <CCol xs=\"12\" sm=\"6\" md=\"6\">\r\n                                <CFormGroup>\r\n                                    <CLabel>{Constant.arrFieldMasterZone[0]}</CLabel>\r\n                                    <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                        width: ' 100%'\r\n                                    }}>\r\n                                        <CInput\r\n                                            type=\"text\"\r\n                                            style={{ height: Constant.styleHeightField }}\r\n                                            id=\"add-zone-name\"\r\n                                            maxLength=\"50\"\r\n                                            required\r\n                                        />\r\n                                    </Box>\r\n                                    <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                                </CFormGroup>\r\n                            </CCol>\r\n                        </CRow>\r\n                        <CRow\r\n                        // className='justify-content-center'\r\n                        >\r\n                            <CCol xs=\"12\" sm=\"6\" md=\"4\" lg=\"2\">\r\n                                <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                    width: ' 100%'\r\n                                }}>\r\n                                    <CButton className=\"editbutton\" size={Constant.btAddSize} color=\"success\" block onClick={onClickCheckFormAddData}>\r\n                                        {Constant.btSave}\r\n                                    </CButton>\r\n                                </Box>\r\n\r\n                            </CCol>\r\n                        </CRow>\r\n                    </CForm>\r\n                </CCard>\r\n            </Box>\r\n        </CCollapse >\r\n    )\r\n\r\n    const collapseEditForm = (index) => (\r\n        <CCollapse show={details.includes(index)}>\r\n            <CCardBody>\r\n                {dataEditForm()}\r\n            </CCardBody>\r\n        </CCollapse>\r\n    )\r\n\r\n    const dataEditForm = () => {\r\n        if (isLoadingData) {\r\n            return (\r\n                <div>\r\n                    <CRow>\r\n                        <CCol>\r\n                            <br />\r\n                            <br />\r\n                        </CCol>\r\n                    </CRow>\r\n                    {showLoadingData()}\r\n                    <CRow>\r\n                        <CCol>\r\n                            <br />\r\n                            <br />\r\n                        </CCol>\r\n                    </CRow>\r\n                </div>\r\n            )\r\n        }\r\n        else if (Object.keys(items).length) {\r\n            var data = { ...items };\r\n            return (\r\n                <CForm className=\"edit-needs-validation\" noValidate>\r\n                    <CRow>\r\n                        <CCol md=\"8\" className=\"text-left\">\r\n                            <CFormGroup>\r\n                                <CLabel>{Constant.arrFieldMasterZone[0]}</CLabel>\r\n                                <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                    width: ' 100%'\r\n                                }}>\r\n                                    <CInput\r\n                                        type=\"text\"\r\n                                        style={{ height: Constant.styleHeightField }}\r\n                                        value={data.zoneName}\r\n                                        onChange={handleChangeUpdateField(\"zoneName\")}\r\n                                        maxLength=\"50\"\r\n                                        required\r\n                                    />\r\n                                </Box>\r\n                                <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                        <CCol md=\"4\">\r\n                            <CFormGroup>\r\n\r\n                                <CLabel className='mt-1' class=\"align-top\" variant=\"checkbox\" onClick={handleChangeUpdateField(\"isActive\")}>\r\n                                    &nbsp; {Constant.txtFormisActive}\r\n                                </CLabel>\r\n\r\n\r\n                                <CFormGroup variant=\"checkbox\" className=\"checkbox\">\r\n                                    {/* <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                        width: ' 100%'\r\n                                    }}>\r\n                                        <CInputCheckbox\r\n                                            checked={data.isActive}\r\n                                            onChange={handleChangeUpdateField(\"isActive\")}\r\n                                        />\r\n                                    </Box> */}\r\n                                    <CSwitch className={'mx-1'} variant={'3d'} color={'success'} onChange={handleChangeUpdateField(\"isActive\")} checked={data.isActive} labelOn={'\\u2713'} labelOff={'\\u2715'} />\r\n\r\n                                    {/* <CLabel variant=\"checkbox\" style={{ width: \"max-content\" }} onClick={handleChangeUpdateField(\"isActive\")}>{Constant.txtFormisActive}</CLabel> */}\r\n                                </CFormGroup>\r\n\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow className='justify-content-center'>\r\n                        <CCol xs=\"12\" sm=\"6\" md=\"3\">\r\n                            <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                width: ' 100%'\r\n                            }}>\r\n                                <CButton className=\"editbutton\" size={Constant.btAddSize} color=\"primary\" block onClick={onClickCheckFormEditData}>\r\n                                    {Constant.btEditData}\r\n                                </CButton>\r\n                            </Box>\r\n                        </CCol>\r\n                        <CCol xs=\"12\" sm=\"6\" md=\"3\">\r\n\r\n                            <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                width: ' 100%'\r\n                            }}>\r\n\r\n                                <CButton className=\"editbutton\" size={Constant.btAddSize} color=\"danger\" onClick={handleChangeConfirmDelete(data.zoneId)} block>\r\n                                    {Constant.btDeleteData}\r\n                                </CButton>\r\n                            </Box>\r\n                        </CCol>\r\n                    </CRow>\r\n                </CForm >\r\n            )\r\n        }\r\n    }\r\n\r\n    const allModal = () => (\r\n        <div>\r\n            {/* Start Fetch Loading Modal */}\r\n            <CModal\r\n                size=\"sm\"\r\n                show={isPostingData}\r\n                centered\r\n                closeOnBackdrop={false}\r\n            >\r\n                <CModalBody>\r\n                    {showLoadingData()}\r\n                </CModalBody>\r\n            </CModal>\r\n            {/* End Fetch Loading Modal */}\r\n\r\n            {/* Start Fetch Error Modal */}\r\n            <CModal\r\n                show={errorAPI}\r\n                color=\"danger\"\r\n                closeOnBackdrop={false}\r\n            >\r\n                <CModalHeader>\r\n                    <h5>\r\n                        <CLabel>\r\n                            {Constant.apiTopicFetchError}\r\n                        </CLabel>\r\n                    </h5>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <CLabel>\r\n                        {errorAPI ? errorAPI.message != null ? errorAPI.message : errorAPI.messageDescription : \" \"}\r\n                    </CLabel>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => setErrorAPI(null)}>\r\n                        {Constant.btOK}\r\n                    </CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n            {/* End Fetch Error Modal */}\r\n\r\n            {/* Start Add Modal */}\r\n            <CModal\r\n                show={isConfirmSave}\r\n                onClose={() => setIsConfirmSave(!isConfirmSave)}\r\n                color=\"success\"\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <h5><CModalTitle  >{Constant.titleConfirmChangeData}</CModalTitle></h5>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    {Constant.contentConfirmAddData}\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"success\" onClick={onClickAddData}>\r\n                        {Constant.btOK}\r\n                    </CButton>{' '}\r\n                    <CButton color=\"secondary\" onClick={() => setIsConfirmSave(!isConfirmSave)}>\r\n                        {Constant.btCancel}\r\n                    </CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n            {/* End Add Modal */}\r\n\r\n            {/* Start Edit Modal */}\r\n            <CModal\r\n                show={isConfirmEdit}\r\n                onClose={() => setIsConfirmEdit(!isConfirmEdit)}\r\n                color=\"success\"\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <h5><CModalTitle  >{Constant.titleConfirmChangeData}</CModalTitle></h5>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    {Constant.contentConfirmEditData}\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"success\" onClick={onClickEditData}>\r\n                        {Constant.btOK}\r\n                    </CButton>{' '}\r\n                    <CButton color=\"secondary\" onClick={() => setIsConfirmEdit(!isConfirmEdit)}>\r\n                        {Constant.btCancel}\r\n                    </CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n            {/* End Edit Modal */}\r\n\r\n            {/* Start Delete Modal */}\r\n            <CModal\r\n                show={isConfirmDelete}\r\n                onClose={() => setIsConfirmDelete(!isConfirmDelete)}\r\n                color=\"danger\"\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle>{Constant.titleConfirmChangeData}</CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    {Constant.contentConfirmDeleteData}\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"danger\" onClick={onClickDeleteData}>\r\n                        {Constant.btOK}\r\n                    </CButton>{' '}\r\n                    <CButton color=\"secondary\" onClick={() => setIsConfirmDelete(!isConfirmDelete)}>\r\n                        {Constant.btCancel}\r\n                    </CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n            {/* End Delete Modal */}\r\n        </div>\r\n    )\r\n\r\n    if (error) {\r\n        return (\r\n            <CCol className=\"text-center\">\r\n                {Constant.apiTopicFetchError} : {error.message}\r\n            </CCol>\r\n        );\r\n    }\r\n    else if (!isLoaded) {\r\n        return (\r\n            showLoadingData()\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <CRow>\r\n                <CCol xs=\"12\" lg=\"12\">\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            <CRow>\r\n                                <CCol>\r\n                                    <h3 className=\"headertable\">{Constant.txtMasterZone}</h3>\r\n                                </CCol>\r\n                                <CCol md=\"2\" xs=\"4\">\r\n                                    <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                        width: ' 100%'\r\n                                    }}>\r\n                                        <CButton block className='btn-mainsmp' size={Constant.btHeaderSize} onClick={handleChangeAddForm}>{Constant.btAddData}</CButton>\r\n                                    </Box>\r\n                                </CCol>\r\n                            </CRow>\r\n                            {collapseAddForm()}\r\n                        </CCardHeader>\r\n                        <CCardBody >\r\n                            {/* <CRow className=\"justify-content-center\" > */}\r\n                            {/* className=\"justify-content-center\" */}\r\n                            <CCard>\r\n                                <CCardBody>\r\n                                    <CDataTable\r\n\r\n                                        id=\"table-export\"\r\n                                        items={baseItems}\r\n                                        fields={fields}\r\n                                        columnFilter\r\n                                        tableFilter={{\r\n                                            label: `${Constant.tabletxtSearch}`,\r\n                                            placeholder: `${Constant.tabletxtPlaceholder}`\r\n                                        }}\r\n                                        itemsPerPageSelect={{ label: `${Constant.tabletxtCountPage}` }}\r\n                                        itemsPerPage={10}\r\n                                        hover\r\n                                        sorter\r\n                                        size='lg'\r\n                                        pagination\r\n                                        scopedSlots={{\r\n                                            'isActive':\r\n                                                (data) => (\r\n                                                    <td className=\"py-2 text-center\">\r\n                                                        {data.isActive ? (\r\n                                                            <CIcon name=\"cil-check-circle\" style={{ color: 'green' }} size=\"2xl\" />\r\n                                                        ) : (\r\n                                                            <CIcon name=\"cil-x-circle\" style={{ color: 'red' }} size=\"2xl\" />\r\n                                                        )}\r\n                                                    </td>\r\n                                                ),\r\n                                            'manage':\r\n                                                (data, index) => (\r\n                                                    <td className=\"py-2\">\r\n                                                        <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                                            width: ' 100%'\r\n                                                        }}>\r\n                                                            <CButton\r\n                                                                color=\"primary\"\r\n                                                                variant=\"outline\"\r\n                                                                shape=\"square\"\r\n                                                                size={Constant.btAddSize}\r\n                                                                block\r\n                                                                onClick={() => { toggleDetails(index, data.zoneId) }}\r\n                                                            >\r\n                                                                {details.includes(index) ? `${Constant.btCollapseHide}` : `${Constant.btCollapseShow}`}\r\n                                                            </CButton>\r\n                                                        </Box>\r\n                                                    </td>\r\n                                                ),\r\n                                            'details':\r\n                                                (data, index) => {\r\n                                                    return (\r\n                                                        collapseEditForm(index)\r\n                                                    )\r\n                                                }\r\n                                        }}\r\n                                    />\r\n                                </CCardBody>\r\n                            </CCard>\r\n                            {/* </CRow> */}\r\n                        </CCardBody>\r\n                    </CCard>\r\n                </CCol>\r\n                {allModal()}\r\n            </CRow>\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":""}