{"version":3,"sources":["components/master/logistics/TruckType.js"],"names":["fields","key","label","Constant","arrFieldMasterTruckType","_style","width","sorter","filter","TruckType","useState","error","setError","isLoaded","setIsLoaded","errorAPI","setErrorAPI","isLoadingData","setIsLoadingData","isPostingData","setIsPostingData","baseItems","setBaseItems","items","setItems","details","setDetails","isShowAddForm","setIsShowAddForm","isConfirmSave","setIsConfirmSave","isConfirmEdit","setIsConfirmEdit","isConfirmDelete","setIsConfirmDelete","fieldDelete","setFieldDelete","handleChangeUpdateField","type","e","newObj","truckTypeCode","target","value","truckTypeName","truckTypeDesc","loadWeight","isActive","onClickAddData","document","getElementById","fnInsertData","onClickEditData","truckTypeId","fnUpdateData","onClickDeleteData","fnDeleteData","arrData","Repository","fetchAddTruckTypeList","then","result","httpCode","window","location","reload","fetchEditTruckTypeList","index","fetchRemoveTruckTypeList","fnGetDataForEdit","fetchGetTruckTypeListById","data","useEffect","fetchGetTruckTypeList","getIsValidForm","formClassName","forms","querySelectorAll","isValid","Array","prototype","slice","call","forEach","form","checkValidity","classList","add","onClickCheckFormAddData","onClickCheckFormEditData","showLoadingData","className","apiLoadingData","variant","size","collapseEditForm","show","includes","dataEditForm","Object","keys","length","noValidate","xs","sm","md","component","Grid","item","boxShadow","style","height","styleHeightField","onChange","maxLength","required","inValidNullMessage","htmlFor","onClick","txtFormisActive","color","checked","labelOn","labelOff","btAddSize","block","btEditData","btDeleteData","apiTopicFetchError","message","lg","txtMasterTruckType","btHeaderSize","btAddData","id","btSave","maxHeight","overflowY","tableFilter","tabletxtSearch","placeholder","tabletxtPlaceholder","itemsPerPageSelect","tabletxtCountPage","itemsPerPage","responsive","bordered","pagination","scopedSlots","name","shape","keyId","position","indexOf","newDetails","splice","toggleDetails","btCollapseHide","btCollapseShow","centered","closeOnBackdrop","messageDescription","btOK","onClose","closeButton","titleConfirmChangeData","contentConfirmAddData","btCancel","contentConfirmEditData","contentConfirmDeleteData"],"mappings":"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","file":"static/js/104.277efe42.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CDataTable,\r\n    CCollapse,\r\n    CInput,\r\n    CLabel,\r\n    CForm,\r\n    CFormGroup,\r\n    CModal,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalHeader,\r\n    CModalTitle,\r\n    CSwitch,\r\n    CRow,\r\n    CInvalidFeedback,\r\n    CInputCheckbox,\r\n    CSpinner\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport Repository from '../../../repositories/Repository'\r\nimport Constant from '../../../helpers/Constant';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport functionController from '../../../helpers/FunctionController';\r\n\r\nconst fields = [\r\n    {\r\n        key: 'truckTypeCode',\r\n        label: `${Constant.arrFieldMasterTruckType[0]}`,\r\n    },\r\n    {\r\n        key: 'truckTypeName',\r\n        label: `${Constant.arrFieldMasterTruckType[1]}`,\r\n    },\r\n    {\r\n        key: 'truckTypeDesc',\r\n        label: `${Constant.arrFieldMasterTruckType[2]}`,\r\n    },\r\n    {\r\n        key: 'loadWeight',\r\n        label: `${Constant.arrFieldMasterTruckType[3]}`,\r\n    },\r\n    {\r\n        key: 'isActive',\r\n        label: `${Constant.arrFieldMasterTruckType[4]}`,\r\n        _style: { width: '1%' },\r\n    },\r\n    {\r\n        key: 'manage',\r\n        label: '',\r\n        _style: { width: '1%' },\r\n        sorter: false,\r\n        filter: false\r\n    },\r\n]\r\n\r\nexport default function TruckType() {\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [errorAPI, setErrorAPI] = useState(false);\r\n    const [isLoadingData, setIsLoadingData] = useState(false);\r\n    const [isPostingData, setIsPostingData] = useState(false);\r\n    const [baseItems, setBaseItems] = useState([]);\r\n    const [items, setItems] = useState([]);\r\n    const [details, setDetails] = useState([]);\r\n    const [isShowAddForm, setIsShowAddForm] = useState(false);\r\n    const [isConfirmSave, setIsConfirmSave] = useState(false);\r\n    const [isConfirmEdit, setIsConfirmEdit] = useState(false);\r\n    const [isConfirmDelete, setIsConfirmDelete] = useState(false);\r\n    const [fieldDelete, setFieldDelete] = useState(null);\r\n\r\n    const pageCode = \"\";\r\n\r\n    const toggleDetails = (index, keyId) => {\r\n        const position = details.indexOf(index)\r\n        let newDetails = details.slice()\r\n        if (position !== -1) {\r\n            newDetails.splice(position, 1)\r\n        } else {\r\n            newDetails = [details, index]\r\n            if (!isLoadingData) {\r\n                fnGetDataForEdit(keyId)\r\n            }\r\n        }\r\n        setDetails(newDetails)\r\n    }\r\n\r\n    const handleChangeAddForm = () => {\r\n        setIsShowAddForm(!isShowAddForm);\r\n    }\r\n\r\n    const handleChangeConfirmDelete = (index) => (e) => {\r\n        setIsConfirmDelete(!isConfirmDelete);\r\n        setFieldDelete(index);\r\n    }\r\n\r\n    const handleChangeUpdateField = (type) => (e) => {\r\n        let newObj = { ...items };\r\n        if (type === \"truckTypeCode\")\r\n            newObj.truckTypeCode = e.target.value;\r\n        else if (type === \"truckTypeName\")\r\n            newObj.truckTypeName = e.target.value;\r\n        else if (type === \"truckTypeDesc\")\r\n            newObj.truckTypeDesc = e.target.value;\r\n        else if (type === \"loadWeight\")\r\n            newObj.loadWeight = e.target.value;\r\n        else if (type === \"isActive\")\r\n            newObj.isActive = !newObj.isActive;\r\n        setItems(newObj);\r\n    }\r\n\r\n    const onClickAddData = () => {\r\n        setIsConfirmSave(!isConfirmSave);\r\n        var truckTypeCode = document.getElementById(\"add-trucktype-code\").value;\r\n        var truckTypeName = document.getElementById(\"add-trucktype-name\").value;\r\n        var truckTypeDesc = document.getElementById(\"add-description\").value;\r\n        var loadWeight = document.getElementById(\"add-loadweight\").value;\r\n        var isActive = true;\r\n        var createBy = 1;\r\n        var newArr = [truckTypeCode, truckTypeName, truckTypeDesc, loadWeight, isActive, createBy];\r\n        // console.log(newArr);\r\n        fnInsertData(newArr)\r\n    }\r\n\r\n    const onClickEditData = () => {\r\n        setIsConfirmEdit(!isConfirmEdit);\r\n        var newObj = { ...items };\r\n        var truckTypeId = newObj.truckTypeId;\r\n        var truckTypeCode = newObj.truckTypeCode;\r\n        var truckTypeName = newObj.truckTypeName;\r\n        var truckTypeDesc = newObj.truckTypeDesc;\r\n        var loadWeight = newObj.loadWeight;\r\n        var isActive = newObj.isActive;\r\n        var updateBy = 1;\r\n        var arrObj = [truckTypeId, truckTypeCode, truckTypeName, truckTypeDesc, loadWeight, isActive, updateBy];\r\n        // console.log(arrObj);\r\n        fnUpdateData(arrObj);\r\n    }\r\n\r\n    const onClickDeleteData = () => {\r\n        setIsConfirmDelete(!isConfirmDelete);\r\n        var truckTypeId = fieldDelete;\r\n        // console.log(sourceId);\r\n        fnDeleteData(truckTypeId);\r\n    }\r\n\r\n    const fnInsertData = (arrData) => {\r\n        setIsPostingData(true);\r\n        Repository.fetchAddTruckTypeList(arrData)\r\n            .then(\r\n                (result) => {\r\n                    setIsPostingData(false);\r\n                    if (result.httpCode === \"200\")\r\n                        window.location.reload(false);\r\n                    else\r\n                        setErrorAPI(result);\r\n                },\r\n                (error) => {\r\n                    setIsPostingData(false);\r\n                    setErrorAPI(error);\r\n                }\r\n            )\r\n    }\r\n\r\n    const fnUpdateData = (arrData) => {\r\n        setIsPostingData(true);\r\n        Repository.fetchEditTruckTypeList(arrData)\r\n            .then(\r\n                (result) => {\r\n                    setIsPostingData(false);\r\n                    if (result.httpCode === \"200\")\r\n                        window.location.reload(false);\r\n                    else\r\n                        setErrorAPI(result);\r\n                },\r\n                (error) => {\r\n                    setIsPostingData(false);\r\n                    setErrorAPI(error);\r\n                }\r\n            )\r\n    }\r\n\r\n    const fnDeleteData = (index) => {\r\n        setIsPostingData(true);\r\n        Repository.fetchRemoveTruckTypeList(index)\r\n            .then(\r\n                (result) => {\r\n                    setIsPostingData(false);\r\n                    if (result.httpCode === \"200\")\r\n                        window.location.reload(false);\r\n                    else\r\n                        setErrorAPI(result);\r\n                },\r\n                (error) => {\r\n                    setIsPostingData(false);\r\n                    setErrorAPI(error);\r\n                }\r\n            )\r\n    }\r\n\r\n    const fnGetDataForEdit = (index) => {\r\n        setIsLoadingData(true);\r\n        setItems({});\r\n        Repository.fetchGetTruckTypeListById(index)\r\n            .then(\r\n                (result) => {\r\n                    setIsLoadingData(false);\r\n                    if (result.httpCode === \"200\") {\r\n                        setItems(result.data);\r\n                    }\r\n                    else {\r\n                        setErrorAPI(result);\r\n                    }\r\n                },\r\n                (error) => {\r\n                    setIsLoadingData(false);\r\n                    setErrorAPI(error);\r\n                }\r\n            )\r\n    }\r\n\r\n    const fnCheckUserAuth = () => {\r\n        var result = functionController.getUserAuthenOneRole(pageCode);\r\n        if (result.isAuth) {\r\n            // initeState();\r\n        }\r\n        else {\r\n            setIsLoaded(true);\r\n            setError(Constant.apiMessageUnAuthenToUsePage);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        Repository.fetchGetTruckTypeList()\r\n            .then(\r\n                (result) => {\r\n                    setIsLoaded(true);\r\n                    if (result.httpCode === \"200\") {\r\n                        setBaseItems(result.data);\r\n                    }\r\n                    else {\r\n                        setError(result);\r\n                    }\r\n                },\r\n                (error) => {\r\n                    setIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n            )\r\n    }, []);\r\n\r\n    const getIsValidForm = (formClassName) => {\r\n        var forms = document.querySelectorAll(`.${formClassName}`);\r\n        var isValid = false;\r\n        Array.prototype.slice.call(forms)\r\n            .forEach(function (form) {\r\n                if (form.checkValidity()) {\r\n                    isValid = true;\r\n                }\r\n                form.classList.add('was-validated');\r\n            });\r\n        return (isValid);\r\n    }\r\n\r\n    const onClickCheckFormAddData = () => {\r\n        if (getIsValidForm(\"add-needs-validation\")) {\r\n            setIsConfirmSave(!isConfirmSave);\r\n        }\r\n    }\r\n\r\n    const onClickCheckFormEditData = () => {\r\n        if (getIsValidForm(\"edit-needs-validation\")) {\r\n            setIsConfirmEdit(!isConfirmEdit);\r\n        }\r\n    }\r\n\r\n    const showLoadingData = () => (\r\n        <CCol className=\"text-center headtext\">\r\n            <CLabel>\r\n                {Constant.apiLoadingData}\r\n            </CLabel>\r\n            {\" \"}\r\n            <CSpinner variant=\"grow\" size=\"md\" />\r\n        </CCol>\r\n    )\r\n\r\n    const collapseAddForm = () => (\r\n        <CCollapse show={isShowAddForm}>\r\n            <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                width: ' 100%'\r\n            }}>\r\n                <CCard className='p-3'>\r\n                    <CForm className=\"add-needs-validation\" noValidate>\r\n                        <CRow>\r\n                            <CCol xs=\"4\" sm=\"6\" md=\"3\">\r\n                                <CFormGroup>\r\n                                    <CLabel>{Constant.arrFieldMasterTruckType[0]}</CLabel>\r\n                                    <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                        width: ' 100%'\r\n                                    }}>\r\n                                        <CInput\r\n                                            type=\"text\"\r\n                                            style={{ height: Constant.styleHeightField }}\r\n                                            id=\"add-trucktype-code\"\r\n                                            maxLength=\"15\"\r\n                                            required\r\n                                        />\r\n                                    </Box>\r\n                                    <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                                </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"4\" sm=\"6\" md=\"3\">\r\n                                <CFormGroup>\r\n                                    <CLabel>{Constant.arrFieldMasterTruckType[1]}</CLabel>\r\n                                    <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                        width: ' 100%'\r\n                                    }}>\r\n                                        <CInput\r\n                                            type=\"text\"\r\n                                            style={{ height: Constant.styleHeightField }}\r\n                                            id=\"add-trucktype-name\"\r\n                                            maxLength=\"50\"\r\n                                            required\r\n                                        />\r\n                                    </Box>\r\n                                    <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                                </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"4\" sm=\"6\" md=\"3\">\r\n                                <CFormGroup>\r\n                                    <CLabel>{Constant.arrFieldMasterTruckType[3]}</CLabel>\r\n                                    <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                        width: ' 100%'\r\n                                    }}>\r\n                                        <CInput\r\n                                            type=\"number\"\r\n                                            style={{ height: Constant.styleHeightField }}\r\n                                            id=\"add-loadweight\"\r\n                                            maxLength=\"18\"\r\n                                            required\r\n                                        />\r\n                                    </Box>\r\n                                    <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                                </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"4\" sm=\"6\" md=\"3\" />\r\n                            <CCol xs=\"4\" sm=\"6\" md=\"6\">\r\n                                <CFormGroup>\r\n                                    <CLabel>{Constant.arrFieldMasterTruckType[2]}</CLabel>\r\n                                    <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                        width: ' 100%'\r\n                                    }}>\r\n                                        <CInput\r\n                                            type=\"text\"\r\n                                            style={{ height: Constant.styleHeightField }}\r\n                                            id=\"add-description\"\r\n                                            maxLength=\"50\"\r\n                                        />\r\n                                    </Box>\r\n                                    <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                                </CFormGroup>\r\n                            </CCol>\r\n                        </CRow>\r\n                        <CRow className='justify-content-center'>\r\n                            <CCol xs=\"4\" sm=\"6\" md=\"1\">\r\n                                <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                    width: ' 100%'\r\n                                }}>\r\n                                    <CButton className=\"editbutton\" size={Constant.btAddSize} color=\"success\" block onClick={onClickCheckFormAddData}>\r\n                                        {Constant.btSave}\r\n                                    </CButton>\r\n                                </Box>\r\n                            </CCol>\r\n                        </CRow>\r\n                    </CForm>\r\n                </CCard>\r\n            </Box>\r\n        </CCollapse >\r\n    )\r\n\r\n    const collapseEditForm = (index) => (\r\n        <CCollapse show={details.includes(index)}>\r\n            <CCardBody>\r\n                {dataEditForm()}\r\n            </CCardBody>\r\n        </CCollapse>\r\n    )\r\n\r\n    const dataEditForm = () => {\r\n        if (isLoadingData) {\r\n            return (\r\n                <div>\r\n                    <CRow>\r\n                        <CCol>\r\n                            <br />\r\n                            <br />\r\n                            <br />\r\n                            <br />\r\n                        </CCol>\r\n                    </CRow>\r\n                    {showLoadingData()}\r\n                    <CRow>\r\n                        <CCol>\r\n                            <br />\r\n                            <br />\r\n                            <br />\r\n                            <br />\r\n                        </CCol>\r\n                    </CRow>\r\n                </div>\r\n            )\r\n        }\r\n        else if (Object.keys(items).length) {\r\n            var data = { ...items };\r\n            return (\r\n                <CForm className=\"edit-needs-validation\" noValidate>\r\n                    <CRow>\r\n                        <CCol xs=\"12\" sm=\"6\" md=\"4\" className=\"text-left\">\r\n                            <CFormGroup>\r\n                                <CLabel>{Constant.arrFieldMasterTruckType[0]}</CLabel>\r\n                                <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                    width: ' 100%'\r\n                                }}>\r\n                                    <CInput\r\n                                        type=\"text\"\r\n                                        style={{ height: Constant.styleHeightField }}\r\n                                        value={data.truckTypeCode}\r\n                                        onChange={handleChangeUpdateField(\"truckTypeCode\")}\r\n                                        maxLength=\"15\"\r\n                                        required\r\n                                    />\r\n                                </Box>\r\n                                <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                        <CCol xs=\"12\" sm=\"6\" md=\"4\" className=\"text-left\">\r\n                            <CFormGroup>\r\n                                <CLabel>{Constant.arrFieldMasterTruckType[1]}</CLabel>\r\n                                <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                    width: ' 100%'\r\n                                }}>\r\n                                    <CInput\r\n                                        type=\"text\"\r\n                                        style={{ height: Constant.styleHeightField }}\r\n                                        value={data.truckTypeName}\r\n                                        onChange={handleChangeUpdateField(\"truckTypeName\")}\r\n                                        maxLength=\"50\"\r\n                                        required\r\n                                    />\r\n                                </Box>\r\n                                <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                        <CCol xs=\"12\" sm=\"6\" md=\"4\" className=\"text-left\">\r\n                            <CFormGroup>\r\n                                <CLabel>{Constant.arrFieldMasterTruckType[3]}</CLabel>\r\n                                <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                    width: ' 100%'\r\n                                }}>\r\n                                    <CInput\r\n                                        type=\"number\"\r\n                                        style={{ height: Constant.styleHeightField }}\r\n                                        value={data.loadWeight}\r\n                                        onChange={handleChangeUpdateField(\"loadWeight\")}\r\n                                        maxLength=\"18\"\r\n                                        required\r\n                                    />\r\n                                </Box>\r\n                                <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\" sm=\"6\" md=\"6\" className=\"text-left\">\r\n                            <CFormGroup>\r\n                                <CLabel>{Constant.arrFieldMasterTruckType[2]}</CLabel>\r\n                                <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                    width: ' 100%'\r\n                                }}>\r\n                                    <CInput\r\n                                        type=\"text\"\r\n                                        style={{ height: Constant.styleHeightField }}\r\n                                        value={data.truckTypeDesc}\r\n                                        onChange={handleChangeUpdateField(\"truckTypeDesc\")}\r\n                                        maxLength=\"50\"\r\n                                    />\r\n                                </Box>\r\n                                <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                        <CCol xs=\"12\" sm=\"6\" md=\"2\" className=\"text-left\">\r\n                            <CFormGroup>\r\n\r\n                                <CCol md=\"12\">\r\n                                    <CFormGroup variant=\"checkbox\" className=\"checkbox\" >\r\n                                        <CLabel htmlFor=\"nf-email\" onClick={handleChangeUpdateField(\"isActive\")}>\r\n                                            &nbsp; {Constant.txtFormisActive}\r\n                                        </CLabel>\r\n                                        &nbsp;\r\n                                        <CSwitch className={'mx-1'} variant={'3d'} color={'success'} onChange={handleChangeUpdateField(\"isActive\")} checked={data.isActive} labelOn={'\\u2713'} labelOff={'\\u2715'} />\r\n\r\n\r\n                                    </CFormGroup>\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow className='justify-content-center'>\r\n                        <CCol xs=\"12\" sm=\"6\" md=\"2\">\r\n                            <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                width: ' 100%'\r\n                            }}>\r\n                                <CButton className=\"editbutton\" size={Constant.btAddSize} color=\"primary\" block onClick={onClickCheckFormEditData}>\r\n                                    {Constant.btEditData}\r\n                                </CButton>\r\n                            </Box>\r\n                        </CCol >\r\n                        <CCol xs=\"12\" sm=\"6\" md=\"2\">\r\n\r\n                            <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                width: ' 100%'\r\n                            }}>\r\n\r\n                                <CButton className=\"editbutton\" size={Constant.btAddSize} color=\"danger\" onClick={handleChangeConfirmDelete(data.truckTypeId)} block>\r\n                                    {Constant.btDeleteData}\r\n                                </CButton>\r\n                            </Box>\r\n                        </CCol>\r\n                    </CRow>\r\n                </CForm>\r\n            )\r\n        }\r\n    }\r\n\r\n    const allModal = () => (\r\n        <div>\r\n            {/* Start Fetch Loading Modal */}\r\n            <CModal\r\n                size=\"sm\"\r\n                show={isPostingData}\r\n                centered\r\n                closeOnBackdrop={false}\r\n            >\r\n                <CModalBody>\r\n                    {showLoadingData()}\r\n                </CModalBody>\r\n            </CModal>\r\n            {/* End Fetch Loading Modal */}\r\n\r\n            {/* Start Fetch Error Modal */}\r\n            <CModal\r\n                show={errorAPI}\r\n                color=\"danger\"\r\n                closeOnBackdrop={false}\r\n            >\r\n                <CModalHeader>\r\n                    <h5>\r\n                        <CLabel>\r\n                            {Constant.apiTopicFetchError}\r\n                        </CLabel>\r\n                    </h5>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <CLabel>\r\n                        {errorAPI ? errorAPI.message != null ? errorAPI.message : errorAPI.messageDescription : \" \"}\r\n                    </CLabel>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => setErrorAPI(null)}>\r\n                        {Constant.btOK}\r\n                    </CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n            {/* End Fetch Error Modal */}\r\n\r\n            {/* Start Add Modal */}\r\n            <CModal\r\n                show={isConfirmSave}\r\n                onClose={() => setIsConfirmSave(!isConfirmSave)}\r\n                color=\"success\"\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <h5><CModalTitle  >{Constant.titleConfirmChangeData}</CModalTitle></h5>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    {Constant.contentConfirmAddData}\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"success\" onClick={onClickAddData}>\r\n                        {Constant.btOK}\r\n                    </CButton>{' '}\r\n                    <CButton color=\"secondary\" onClick={() => setIsConfirmSave(!isConfirmSave)}>\r\n                        {Constant.btCancel}\r\n                    </CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n            {/* End Add Modal */}\r\n\r\n            {/* Start Edit Modal */}\r\n            <CModal\r\n                show={isConfirmEdit}\r\n                onClose={() => setIsConfirmEdit(!isConfirmEdit)}\r\n                color=\"success\"\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <h5><CModalTitle  >{Constant.titleConfirmChangeData}</CModalTitle></h5>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    {Constant.contentConfirmEditData}\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"success\" onClick={onClickEditData}>\r\n                        {Constant.btOK}\r\n                    </CButton>{' '}\r\n                    <CButton color=\"secondary\" onClick={() => setIsConfirmEdit(!isConfirmEdit)}>\r\n                        {Constant.btCancel}\r\n                    </CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n            {/* End Edit Modal */}\r\n\r\n            {/* Start Delete Modal */}\r\n            <CModal\r\n                show={isConfirmDelete}\r\n                onClose={() => setIsConfirmDelete(!isConfirmDelete)}\r\n                color=\"danger\"\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle>{Constant.titleConfirmChangeData}</CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    {Constant.contentConfirmDeleteData}\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"danger\" onClick={onClickDeleteData}>\r\n                        {Constant.btOK}\r\n                    </CButton>{' '}\r\n                    <CButton color=\"secondary\" onClick={() => setIsConfirmDelete(!isConfirmDelete)}>\r\n                        {Constant.btCancel}\r\n                    </CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n            {/* End Delete Modal */}\r\n        </div>\r\n    )\r\n\r\n    if (error) {\r\n        return (\r\n            <CCol className=\"text-center\">\r\n                {Constant.apiTopicFetchError} : {error.message}\r\n            </CCol>\r\n        );\r\n    } else if (!isLoaded) {\r\n        return (\r\n            showLoadingData()\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <CRow>\r\n                <CCol xs=\"12\" lg=\"12\">\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            <CRow>\r\n                                <CCol>\r\n                                    <h3 className=\"headertable\">{Constant.txtMasterTruckType}</h3>\r\n                                </CCol>\r\n                                <CCol md=\"2\" xs=\"4\">\r\n                                    <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                        width: ' 100%'\r\n                                    }}>\r\n                                        <CButton block className='btn-mainsmp' size={Constant.btHeaderSize} onClick={handleChangeAddForm}>{Constant.btAddData}</CButton>\r\n                                    </Box>\r\n                                </CCol>\r\n                            </CRow>\r\n                            {collapseAddForm()}\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                            {/* <CRow className=\"justify-content-center\"> */}\r\n                            <CCard className=\"pl-1 pr-1\" style={{ maxHeight: \"700px\", overflowY: \"auto\" }}>\r\n                                {/* <CCardBody> */}\r\n                                <CDataTable\r\n                                    items={baseItems}\r\n                                    fields={fields}\r\n                                    // columnFilter\r\n                                    tableFilter={{\r\n                                        label: `${Constant.tabletxtSearch}`,\r\n                                        placeholder: `${Constant.tabletxtPlaceholder}`\r\n                                    }}\r\n                                    itemsPerPageSelect={{ label: `${Constant.tabletxtCountPage}` }}\r\n                                    itemsPerPage={10}\r\n                                    // hover\r\n                                    // sorter\r\n                                    responsive\r\n                                    bordered\r\n                                    pagination\r\n                                    scopedSlots={{\r\n                                        'isActive':\r\n                                            (data) => (\r\n                                                <td className=\"py-2 text-center\">\r\n                                                    {data.isActive ? (\r\n                                                        <CIcon name=\"cil-check-circle\" style={{ color: 'green' }} size=\"2xl\" />\r\n                                                    ) : (\r\n                                                        <CIcon name=\"cil-x-circle\" style={{ color: 'red' }} size=\"2xl\" />\r\n                                                    )}\r\n                                                </td>\r\n                                            ),\r\n                                        'manage':\r\n                                            (data, index) => (\r\n                                                <td className=\"py-2\">\r\n                                                    <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                                        width: ' 100%'\r\n                                                    }}>\r\n                                                        <CButton\r\n                                                            color=\"primary\"\r\n                                                            variant=\"outline\"\r\n                                                            shape=\"square\"\r\n                                                            size={Constant.btAddSize}\r\n                                                            onClick={() => { toggleDetails(index, data.truckTypeId) }}\r\n                                                        >\r\n                                                            {details.includes(index) ? `${Constant.btCollapseHide}` : `${Constant.btCollapseShow}`}\r\n                                                        </CButton>\r\n                                                    </Box>\r\n                                                </td>\r\n                                            ),\r\n                                        'details':\r\n                                            (data, index) => {\r\n                                                return (\r\n                                                    collapseEditForm(index)\r\n                                                )\r\n                                            }\r\n                                    }}\r\n                                />\r\n                                {/* </CCardBody> */}\r\n                            </CCard>\r\n                            {/* </CRow> */}\r\n                        </CCardBody>\r\n                    </CCard>\r\n                </CCol>\r\n                {allModal()}\r\n            </CRow>\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":""}