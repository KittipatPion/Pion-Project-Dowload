{"version":3,"sources":["components/master/location/Source.js"],"names":["fields","key","label","Constant","arrFieldMasterSource","_style","width","sorter","filter","Source","useState","error","setError","isLoaded","setIsLoaded","errorAPI","setErrorAPI","isLoadingData","setIsLoadingData","isPostingData","setIsPostingData","baseItems","setBaseItems","items","setItems","details","setDetails","isShowAddForm","setIsShowAddForm","isConfirmSave","setIsConfirmSave","isConfirmEdit","setIsConfirmEdit","isConfirmDelete","setIsConfirmDelete","fieldDelete","setFieldDelete","handleChangeUpdateField","type","e","newObj","sourceCode","target","value","sourceNameEng","sourceNameThai","sourceDesc","onClickAddData","document","getElementById","fnInsertData","onClickEditData","sourceId","fnUpdateData","onClickDeleteData","fnDeleteData","arrData","Repository","fetchAddSourceList","then","result","httpCode","window","location","reload","fetchEditSourceList","index","fetchRemoveSourceList","fnGetDataForEdit","fetchGetSourceListById","data","useEffect","fetchGetSourceList","getIsValidForm","formClassName","forms","querySelectorAll","isValid","Array","prototype","slice","call","forEach","form","checkValidity","classList","add","onClickCheckFormAddData","onClickCheckFormEditData","showLoadingData","className","apiLoadingData","variant","size","collapseEditForm","show","includes","dataEditForm","Object","keys","length","noValidate","xs","sm","md","component","Grid","item","boxShadow","style","height","styleHeightField","placeholder","onChange","maxLength","required","inValidNullMessage","btAddSize","color","block","onClick","btEditData","btDeleteData","apiTopicFetchError","message","lg","txtMasterSource","btHeaderSize","btAddData","id","btSave","columnFilter","tableFilter","tabletxtSearch","tabletxtPlaceholder","itemsPerPageSelect","tabletxtCountPage","itemsPerPage","hover","pagination","scopedSlots","shape","keyId","position","indexOf","newDetails","splice","toggleDetails","btCollapseHide","btCollapseShow","centered","closeOnBackdrop","messageDescription","btOK","onClose","closeButton","titleConfirmChangeData","contentConfirmAddData","btCancel","contentConfirmEditData","contentConfirmDeleteData"],"mappings":"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","file":"static/js/102.4dbb63b7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CDataTable,\r\n    CCollapse,\r\n    CInput,\r\n    CLabel,\r\n    CForm,\r\n    CFormGroup,\r\n    CModal,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalHeader,\r\n    CModalTitle,\r\n    CRow,\r\n    CInvalidFeedback,\r\n    CSpinner\r\n} from '@coreui/react'\r\nimport Repository from '../../../repositories/Repository'\r\nimport Constant from '../../../helpers/Constant';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport functionController from '../../../helpers/FunctionController';\r\n\r\nconst fields = [\r\n    {\r\n        key: 'sourceCode',\r\n        label: `${Constant.arrFieldMasterSource[0]}`,\r\n    },\r\n    {\r\n        key: 'sourceNameEng',\r\n        label: `${Constant.arrFieldMasterSource[1]}`,\r\n    },\r\n    {\r\n        key: 'sourceNameThai',\r\n        label: `${Constant.arrFieldMasterSource[2]}`,\r\n    },\r\n    {\r\n        key: 'sourceDesc',\r\n        label: `${Constant.arrFieldMasterSource[3]}`,\r\n    },\r\n    {\r\n        key: 'manage',\r\n        label: '',\r\n        _style: { width: '1%' },\r\n        sorter: false,\r\n        filter: false\r\n    },\r\n]\r\n\r\nexport default function Source() {\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [errorAPI, setErrorAPI] = useState(false);\r\n    const [isLoadingData, setIsLoadingData] = useState(false);\r\n    const [isPostingData, setIsPostingData] = useState(false);\r\n    const [baseItems, setBaseItems] = useState([]);\r\n    const [items, setItems] = useState([]);\r\n    const [details, setDetails] = useState([]);\r\n    const [isShowAddForm, setIsShowAddForm] = useState(false);\r\n    const [isConfirmSave, setIsConfirmSave] = useState(false);\r\n    const [isConfirmEdit, setIsConfirmEdit] = useState(false);\r\n    const [isConfirmDelete, setIsConfirmDelete] = useState(false);\r\n    const [fieldDelete, setFieldDelete] = useState(null);\r\n\r\n    const pageCode = \"\";\r\n\r\n    const toggleDetails = (index, keyId) => {\r\n        const position = details.indexOf(index)\r\n        let newDetails = details.slice()\r\n        if (position !== -1) {\r\n            newDetails.splice(position, 1)\r\n        } else {\r\n            newDetails = [details, index]\r\n            if (!isLoadingData) {\r\n                fnGetDataForEdit(keyId)\r\n            }\r\n        }\r\n        setDetails(newDetails)\r\n    }\r\n\r\n    const handleChangeAddForm = () => {\r\n        setIsShowAddForm(!isShowAddForm);\r\n    }\r\n\r\n    const handleChangeConfirmDelete = (index) => (e) => {\r\n        setIsConfirmDelete(!isConfirmDelete);\r\n        setFieldDelete(index);\r\n    }\r\n\r\n    const handleChangeUpdateField = (type) => (e) => {\r\n        let newObj = { ...items };\r\n        if (type === \"sourceCode\")\r\n            newObj.sourceCode = e.target.value;\r\n        else if (type === \"sourceNameEng\")\r\n            newObj.sourceNameEng = e.target.value;\r\n        else if (type === \"sourceNameThai\")\r\n            newObj.sourceNameThai = e.target.value;\r\n        else if (type === \"sourceDesc\")\r\n            newObj.sourceDesc = e.target.value;\r\n        setItems(newObj);\r\n    }\r\n\r\n    const onClickAddData = () => {\r\n        setIsConfirmSave(!isConfirmSave);\r\n        var sourceCode = document.getElementById(\"add-source-code\").value;\r\n        var sourceNameEng = document.getElementById(\"add-en-name\").value;\r\n        var sourceNameThai = document.getElementById(\"add-th-name\").value;\r\n        var sourceDesc = document.getElementById(\"add-description\").value;\r\n        var createBy = 1;\r\n        var newArr = [sourceCode, sourceNameEng, sourceNameThai, sourceDesc, createBy];\r\n        // console.log(newArr);\r\n        fnInsertData(newArr)\r\n    }\r\n\r\n    const onClickEditData = () => {\r\n        setIsConfirmEdit(!isConfirmEdit);\r\n        var newObj = { ...items };\r\n        var sourceId = newObj.sourceId;\r\n        var sourceCode = newObj.sourceCode;\r\n        var sourceNameEng = newObj.sourceNameEng;\r\n        var sourceNameThai = newObj.sourceNameThai;\r\n        var sourceDesc = newObj.sourceDesc;\r\n        var updateBy = 1;\r\n        var newArr = [sourceId, sourceCode, sourceNameEng, sourceNameThai, sourceDesc, updateBy];\r\n        // console.log(newArr);\r\n        fnUpdateData(newArr);\r\n    }\r\n\r\n    const onClickDeleteData = () => {\r\n        setIsConfirmDelete(!isConfirmDelete);\r\n        var sourceId = fieldDelete;\r\n        // console.log(sourceId);\r\n        fnDeleteData(sourceId);\r\n    }\r\n\r\n    const fnInsertData = (arrData) => {\r\n        setIsPostingData(true);\r\n        Repository.fetchAddSourceList(arrData)\r\n            .then(\r\n                (result) => {\r\n                    setIsPostingData(false);\r\n                    if (result.httpCode === \"200\")\r\n                        window.location.reload(false);\r\n                    else\r\n                        setErrorAPI(result);\r\n                },\r\n                (error) => {\r\n                    setIsPostingData(false);\r\n                    setErrorAPI(error);\r\n                }\r\n            )\r\n    }\r\n\r\n    const fnUpdateData = (arrData) => {\r\n        setIsPostingData(true);\r\n        Repository.fetchEditSourceList(arrData)\r\n            .then(\r\n                (result) => {\r\n                    setIsPostingData(false);\r\n                    if (result.httpCode === \"200\")\r\n                        window.location.reload(false);\r\n                    else\r\n                        setErrorAPI(result);\r\n                },\r\n                (error) => {\r\n                    setIsPostingData(false);\r\n                    setErrorAPI(error);\r\n                }\r\n            )\r\n    }\r\n\r\n    const fnDeleteData = (index) => {\r\n        setIsPostingData(true);\r\n        Repository.fetchRemoveSourceList(index)\r\n            .then(\r\n                (result) => {\r\n                    setIsPostingData(false);\r\n                    if (result.httpCode === \"200\")\r\n                        window.location.reload(false);\r\n                    else\r\n                        setErrorAPI(result);\r\n                },\r\n                (error) => {\r\n                    setIsPostingData(false);\r\n                    setErrorAPI(error);\r\n                }\r\n            )\r\n    }\r\n\r\n    const fnGetDataForEdit = (index) => {\r\n        setIsLoadingData(true);\r\n        setItems({});\r\n        Repository.fetchGetSourceListById(index)\r\n            .then(\r\n                (result) => {\r\n                    setIsLoadingData(false);\r\n                    if (result.httpCode === \"200\") {\r\n                        setItems(result.data);\r\n                    }\r\n                    else {\r\n                        setErrorAPI(result);\r\n                    }\r\n                },\r\n                (error) => {\r\n                    setIsLoadingData(false);\r\n                    setErrorAPI(error);\r\n                }\r\n            )\r\n    }\r\n\r\n    const fnCheckUserAuth = () => {\r\n        var result = functionController.getUserAuthenOneRole(pageCode);\r\n        if (result.isAuth) {\r\n            // initeState();\r\n        }\r\n        else {\r\n            setIsLoaded(true);\r\n            setError(Constant.apiMessageUnAuthenToUsePage);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        Repository.fetchGetSourceList()\r\n            .then(\r\n                (result) => {\r\n                    setIsLoaded(true);\r\n                    if (result.httpCode === \"200\") {\r\n                        setBaseItems(result.data);\r\n                    }\r\n                    else {\r\n                        setError(result);\r\n                    }\r\n                },\r\n                (error) => {\r\n                    setIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n            )\r\n    }, []);\r\n\r\n    const getIsValidForm = (formClassName) => {\r\n        var forms = document.querySelectorAll(`.${formClassName}`);\r\n        var isValid = false;\r\n        Array.prototype.slice.call(forms)\r\n            .forEach(function (form) {\r\n                if (form.checkValidity()) {\r\n                    isValid = true;\r\n                }\r\n                form.classList.add('was-validated');\r\n            });\r\n        return (isValid);\r\n    }\r\n\r\n    const onClickCheckFormAddData = () => {\r\n        if (getIsValidForm(\"add-needs-validation\")) {\r\n            setIsConfirmSave(!isConfirmSave);\r\n        }\r\n    }\r\n\r\n    const onClickCheckFormEditData = () => {\r\n        if (getIsValidForm(\"edit-needs-validation\")) {\r\n            setIsConfirmEdit(!isConfirmEdit);\r\n        }\r\n    }\r\n\r\n    const showLoadingData = () => (\r\n        <CCol className=\"text-center headtext\">\r\n            <CLabel>\r\n                {Constant.apiLoadingData}\r\n            </CLabel>\r\n            {\" \"}\r\n            <CSpinner variant=\"grow\" size=\"md\" />\r\n        </CCol>\r\n    )\r\n\r\n    const collapseAddForm = () => (\r\n        <CCollapse show={isShowAddForm}>\r\n            <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                width: ' 100%'\r\n            }}>\r\n                <CCard className='p-3'>\r\n                    <CForm className=\"add-needs-validation\" noValidate>\r\n                        <CRow>\r\n                            <CCol xs=\"12\" sm=\"6\" md=\"3\">\r\n                                <CFormGroup>\r\n                                    <CLabel>{Constant.arrFieldMasterSource[0]}</CLabel>\r\n                                    <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                        width: ' 100%'\r\n                                    }}>\r\n                                        <CInput\r\n                                            type=\"text\"\r\n                                            style={{ height: Constant.styleHeightField }}\r\n                                            id=\"add-source-code\"\r\n                                            maxLength=\"10\"\r\n                                            required\r\n                                        />\r\n                                    </Box>\r\n                                    <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                                </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" sm=\"6\" md=\"3\">\r\n                                <CFormGroup>\r\n                                    <CLabel>{Constant.arrFieldMasterSource[1]}</CLabel>\r\n                                    <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                        width: ' 100%'\r\n                                    }}>\r\n                                        <CInput\r\n                                            type=\"text\"\r\n                                            style={{ height: Constant.styleHeightField }}\r\n                                            id=\"add-en-name\"\r\n                                            maxLength=\"50\"\r\n                                            required\r\n                                        />\r\n                                    </Box>\r\n                                    <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                                </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" sm=\"6\" md=\"3\">\r\n                                <CFormGroup>\r\n                                    <CLabel>{Constant.arrFieldMasterSource[2]}</CLabel>\r\n                                    <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                        width: ' 100%'\r\n                                    }}>\r\n                                        <CInput\r\n                                            type=\"text\"\r\n                                            style={{ height: Constant.styleHeightField }}\r\n                                            id=\"add-th-name\"\r\n                                            maxLength=\"50\"\r\n                                            required\r\n                                        />\r\n                                    </Box>\r\n                                    <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                                </CFormGroup>\r\n                            </CCol>\r\n                            <CCol md=\"3\" />\r\n                            <CCol xs=\"12\" sm=\"6\" md=\"6\">\r\n                                <CFormGroup>\r\n                                    <CLabel>{Constant.arrFieldMasterSource[3]}</CLabel>\r\n                                    <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                        width: ' 100%'\r\n                                    }}>\r\n                                        <CInput\r\n                                            type=\"text\"\r\n                                            style={{ height: Constant.styleHeightField }}\r\n                                            id=\"add-description\"\r\n                                            maxLength=\"255\"\r\n                                        />\r\n                                    </Box>\r\n                                </CFormGroup>\r\n                            </CCol>\r\n                        </CRow>\r\n                        <CRow className='justify-content-center'>\r\n                            <CCol xs=\"12\" sm=\"6\" md=\"4\" lg=\"2\">\r\n                                <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                    width: ' 100%'\r\n                                }}>\r\n                                    <CButton className=\"editbutton\" size={Constant.btAddSize} color=\"success\" block onClick={onClickCheckFormAddData}>\r\n                                        {Constant.btSave}\r\n                                    </CButton>\r\n                                </Box>\r\n                            </CCol>\r\n                        </CRow>\r\n                    </CForm>\r\n                </CCard>\r\n            </Box>\r\n        </CCollapse >\r\n    )\r\n\r\n    const collapseEditForm = (index) => (\r\n        <CCollapse show={details.includes(index)}>\r\n            <CCardBody>\r\n                {dataEditForm()}\r\n            </CCardBody>\r\n        </CCollapse>\r\n    )\r\n\r\n    const dataEditForm = () => {\r\n        if (isLoadingData) {\r\n            return (\r\n                <div>\r\n                    <CRow>\r\n                        <CCol>\r\n                            <br />\r\n                            <br />\r\n                            <br />\r\n                            <br />\r\n                        </CCol>\r\n                    </CRow>\r\n                    {showLoadingData()}\r\n                    <CRow>\r\n                        <CCol>\r\n                            <br />\r\n                            <br />\r\n                            <br />\r\n                            <br />\r\n                        </CCol>\r\n                    </CRow>\r\n                </div>\r\n            )\r\n        }\r\n        else if (Object.keys(items).length) {\r\n            var data = { ...items };\r\n            return (\r\n                <CForm className=\"edit-needs-validation\" noValidate>\r\n                    <CRow>\r\n                        <CCol xs=\"12\" sm=\"6\" md=\"4\" className=\"text-left\">\r\n                            <CFormGroup>\r\n                                <CLabel>{Constant.arrFieldMasterSource[0]}</CLabel>\r\n                                <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                    width: ' 100%'\r\n                                }}>\r\n                                    <CInput\r\n                                        type=\"text\"\r\n                                        style={{ height: Constant.styleHeightField }}\r\n                                        placeholder={data.sourceCode}\r\n                                        value={data.sourceCode}\r\n                                        onChange={handleChangeUpdateField(\"sourceCode\")}\r\n                                        maxLength=\"10\"\r\n                                        required\r\n                                    />\r\n                                </Box>\r\n                                <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                        <CCol xs=\"12\" sm=\"6\" md=\"4\" className=\"text-left\">\r\n                            <CFormGroup>\r\n                                <CLabel>{Constant.arrFieldMasterSource[1]}</CLabel>\r\n                                <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                    width: ' 100%'\r\n                                }}>\r\n                                    <CInput\r\n                                        type=\"text\"\r\n                                        style={{ height: Constant.styleHeightField }}\r\n                                        placeholder={data.sourceNameEng}\r\n                                        value={data.sourceNameEng}\r\n                                        onChange={handleChangeUpdateField(\"sourceNameEng\")}\r\n                                        maxLength=\"50\"\r\n                                        required\r\n                                    />\r\n                                </Box>\r\n                                <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                        <CCol xs=\"12\" sm=\"6\" md=\"4\" className=\"text-left\">\r\n                            <CFormGroup>\r\n                                <CLabel>{Constant.arrFieldMasterSource[2]}</CLabel>\r\n                                <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                    width: ' 100%'\r\n                                }}>\r\n                                    <CInput\r\n                                        type=\"text\"\r\n                                        style={{ height: Constant.styleHeightField }}\r\n                                        placeholder={data.sourceNameThai}\r\n                                        value={data.sourceNameThai}\r\n                                        onChange={handleChangeUpdateField(\"sourceNameThai\")}\r\n                                        maxLength=\"50\"\r\n                                        required\r\n                                    />\r\n                                </Box>\r\n                                <CInvalidFeedback>{Constant.inValidNullMessage}</CInvalidFeedback>\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\" sm=\"6\" md=\"6\" className=\"text-left\">\r\n                            <CFormGroup>\r\n                                <CLabel>{Constant.arrFieldMasterSource[3]}</CLabel>\r\n                                <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                    width: ' 100%'\r\n                                }}>\r\n                                    <CInput\r\n                                        type=\"text\"\r\n                                        style={{ height: Constant.styleHeightField }}\r\n                                        placeholder={data.sourceDesc}\r\n                                        value={data.sourceDesc}\r\n                                        onChange={handleChangeUpdateField(\"sourceDesc\")}\r\n                                        maxLength=\"255\"\r\n                                    />\r\n                                </Box>\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow className='justify-content-center'>\r\n                        <CCol xs=\"12\" sm=\"6\" md=\"2\">\r\n                            <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                width: ' 100%'\r\n                            }}>\r\n                                <CButton className=\"editbutton\" size={Constant.btAddSize} color=\"primary\" block onClick={onClickCheckFormEditData}>\r\n                                    {Constant.btEditData}\r\n                                </CButton>\r\n                            </Box>\r\n                        </CCol>\r\n                        <CCol xs=\"12\" sm=\"6\" md=\"2\">\r\n                            <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                width: ' 100%'\r\n                            }}>\r\n\r\n                                <CButton className=\"editbutton\" size={Constant.btAddSize} color=\"danger\" onClick={handleChangeConfirmDelete(data.sourceId)} block>\r\n                                    {Constant.btDeleteData}\r\n                                </CButton>\r\n                            </Box>\r\n                        </CCol>\r\n                    </CRow>\r\n                </CForm>\r\n            )\r\n        }\r\n    }\r\n\r\n    const allModal = () => (\r\n        <div>\r\n            {/* Start Fetch Loading Modal */}\r\n            <CModal\r\n                size=\"sm\"\r\n                show={isPostingData}\r\n                centered\r\n                closeOnBackdrop={false}\r\n            >\r\n                <CModalBody>\r\n                    {showLoadingData()}\r\n                </CModalBody>\r\n            </CModal>\r\n            {/* End Fetch Loading Modal */}\r\n\r\n            {/* Start Fetch Error Modal */}\r\n            <CModal\r\n                show={errorAPI}\r\n                color=\"danger\"\r\n                closeOnBackdrop={false}\r\n            >\r\n                <CModalHeader>\r\n                    <h5>\r\n                        <CLabel>\r\n                            {Constant.apiTopicFetchError}\r\n                        </CLabel>\r\n                    </h5>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <CLabel>\r\n                        {errorAPI ? errorAPI.message != null ? errorAPI.message : errorAPI.messageDescription : \" \"}\r\n                    </CLabel>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => setErrorAPI(null)}>\r\n                        {Constant.btOK}\r\n                    </CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n            {/* End Fetch Error Modal */}\r\n\r\n            {/* Start Add Modal */}\r\n            <CModal\r\n                show={isConfirmSave}\r\n                onClose={() => setIsConfirmSave(!isConfirmSave)}\r\n                color=\"success\"\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <h5><CModalTitle  >{Constant.titleConfirmChangeData}</CModalTitle></h5>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    {Constant.contentConfirmAddData}\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"success\" onClick={onClickAddData}>\r\n                        {Constant.btOK}\r\n                    </CButton>{' '}\r\n                    <CButton color=\"secondary\" onClick={() => setIsConfirmSave(!isConfirmSave)}>\r\n                        {Constant.btCancel}\r\n                    </CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n            {/* End Add Modal */}\r\n\r\n            {/* Start Edit Modal */}\r\n            <CModal\r\n                show={isConfirmEdit}\r\n                onClose={() => setIsConfirmEdit(!isConfirmEdit)}\r\n                color=\"success\"\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <h5><CModalTitle  >{Constant.titleConfirmChangeData}</CModalTitle></h5>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    {Constant.contentConfirmEditData}\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"success\" onClick={onClickEditData}>\r\n                        {Constant.btOK}\r\n                    </CButton>{' '}\r\n                    <CButton color=\"secondary\" onClick={() => setIsConfirmEdit(!isConfirmEdit)}>\r\n                        {Constant.btCancel}\r\n                    </CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n            {/* End Edit Modal */}\r\n\r\n            {/* Start Delete Modal */}\r\n            <CModal\r\n                show={isConfirmDelete}\r\n                onClose={() => setIsConfirmDelete(!isConfirmDelete)}\r\n                color=\"danger\"\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle>{Constant.titleConfirmChangeData}</CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    {Constant.contentConfirmDeleteData}\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"danger\" onClick={onClickDeleteData}>\r\n                        {Constant.btOK}\r\n                    </CButton>{' '}\r\n                    <CButton color=\"secondary\" onClick={() => setIsConfirmDelete(!isConfirmDelete)}>\r\n                        {Constant.btCancel}\r\n                    </CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n            {/* End Delete Modal */}\r\n        </div>\r\n    )\r\n\r\n    if (error) {\r\n        return (\r\n            <CCol className=\"text-center\">\r\n                {Constant.apiTopicFetchError} : {error.message}\r\n            </CCol>\r\n        );\r\n    } else if (!isLoaded) {\r\n        return (\r\n            showLoadingData()\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <CRow>\r\n                <CCol xs=\"12\" lg=\"12\">\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            <CRow>\r\n                                <CCol>\r\n                                    <h3 className=\"headertable\">{Constant.txtMasterSource}</h3>\r\n                                </CCol>\r\n                                <CCol md=\"2\" xs=\"4\">\r\n                                    <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                        width: ' 100%'\r\n                                    }}>\r\n                                        <CButton block className='btn-mainsmp' size={Constant.btHeaderSize} onClick={handleChangeAddForm}>{Constant.btAddData}</CButton>\r\n                                    </Box>\r\n                                </CCol>\r\n                            </CRow>\r\n                            {collapseAddForm()}\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                            {/* <CRow className=\"justify-content-center\"> */}\r\n                            <CCard>\r\n                                <CCardBody>\r\n                                    <CDataTable\r\n                                        items={baseItems}\r\n                                        fields={fields}\r\n                                        columnFilter\r\n                                        tableFilter={{\r\n                                            label: `${Constant.tabletxtSearch}`,\r\n                                            placeholder: `${Constant.tabletxtPlaceholder}`\r\n                                        }}\r\n                                        itemsPerPageSelect={{ label: `${Constant.tabletxtCountPage}` }}\r\n                                        itemsPerPage={10}\r\n                                        hover\r\n                                        sorter\r\n                                        pagination\r\n                                        scopedSlots={{\r\n                                            'manage':\r\n                                                (data, index) => (\r\n                                                    <td className=\"py-2\">\r\n                                                        <Box className='border-set' component={Grid} item boxShadow={1} xs={{\r\n                                                            width: ' 100%'\r\n                                                        }}>\r\n                                                            <CButton\r\n                                                                color=\"primary\"\r\n                                                                variant=\"outline\"\r\n                                                                shape=\"square\"\r\n                                                                size={Constant.btAddSize}\r\n                                                                block\r\n                                                                onClick={() => { toggleDetails(index, data.sourceId) }}\r\n                                                            >\r\n                                                                {details.includes(index) ? `${Constant.btCollapseHide}` : `${Constant.btCollapseShow}`}\r\n                                                            </CButton>\r\n                                                        </Box>\r\n                                                    </td>\r\n                                                ),\r\n                                            'details':\r\n                                                (data, index) => {\r\n                                                    return (\r\n                                                        collapseEditForm(index)\r\n                                                    )\r\n                                                }\r\n                                        }}\r\n                                    />\r\n                                </CCardBody>\r\n                            </CCard>\r\n                            {/* </CRow> */}\r\n                        </CCardBody>\r\n                    </CCard>\r\n                </CCol>\r\n                {allModal()}\r\n            </CRow>\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":""}